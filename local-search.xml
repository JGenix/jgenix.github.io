<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>cpp_note</title>
    <link href="/2023/06/12/cpp-note/"/>
    <url>/2023/06/12/cpp-note/</url>
    
    <content type="html"><![CDATA[<h3 id="解题经验积累："><a href="#解题经验积累：" class="headerlink" title="解题经验积累："></a>解题经验积累：</h3><ul><li>反向思考，<strong>假如满足所有条件</strong>，只要找到一个不满足就行。</li></ul><h3 id="C-常用库函数："><a href="#C-常用库函数：" class="headerlink" title="C++常用库函数："></a>C++常用库函数：</h3><ul><li><p><code>sort(arr.begin(), arr.end(), [](int a, int b)-&gt;bool &#123;return a &gt; b; &#125;);</code></p></li><li><p><code>reverse(str.begin(),str.end());</code></p></li><li><p><code>s = s1.substr(pos, len);  从pos位置开始 长度为len的子串</code></p></li><li><p><code>str[i] = tolower(str[i]);str[i] = toupper(str[i]);</code></p></li><li><p><code>bool binary_search(arr.begin(), arrr.end(), 3); 返回真假</code></p></li><li><p>split分割字符串</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cpp">vector&lt;string&gt; strs;<br><span class="hljs-function">stringstream <span class="hljs-title">ss</span><span class="hljs-params">(line)</span></span>;<br>string str;<br><span class="hljs-keyword">while</span> (<span class="hljs-built_in">getline</span>(ss, str, <span class="hljs-string">&#x27;,&#x27;</span>)) &#123;<br>     strs.<span class="hljs-built_in">push_back</span>(str);  <br>&#125;<br></code></pre></td></tr></table></figure></li><li><pre><code class="cpp">string str = &quot;abcd&quot;str=str.replace(str.find(&quot;a&quot;),2,&quot;####&quot;);  把&quot;ab&quot; 换成 &quot;####&quot;<figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><br>- lower_bound (<span class="hljs-keyword">begin</span>, last, <span class="hljs-keyword">val</span>, compare) 可以在有序序列中找到&lt;mark&gt;大于等于<span class="hljs-keyword">val</span>&lt;/mark&gt;的位置 (前提有序)<br>  upper_bound (<span class="hljs-keyword">begin</span>, last, <span class="hljs-keyword">val</span>, compare) 可以在有序序列中找到&lt;mark&gt;大于<span class="hljs-keyword">val</span>&lt;/mark&gt;的位置<br><br>- `<span class="hljs-built_in">string</span> s = <span class="hljs-keyword">to</span><span class="hljs-constructor">_string(<span class="hljs-params">n</span>)</span>` **将整数转换成字符串**<br><br>- uique (<span class="hljs-keyword">begin</span>,last) 左闭右开区间<br><br>- **<span class="hljs-built_in">string</span>.erase(pos)**  **<span class="hljs-built_in">string</span>.erase(first, last)**<br><br>- **remove 和 rease 搭配删除所有指定值，remove将元素移到末尾，没有改变size**<br><br>  ```cpp<br>      vector&lt;<span class="hljs-built_in">int</span>&gt; vec = &#123; <span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>&#125;;<br>      vec.erase(remove(vec.<span class="hljs-keyword">begin</span><span class="hljs-literal">()</span>, vec.<span class="hljs-keyword">end</span><span class="hljs-literal">()</span>, <span class="hljs-number">1</span>), vec.<span class="hljs-keyword">end</span><span class="hljs-literal">()</span>);<br></code></pre></td></tr></table></figure></code></pre></li><li><h5 id="list1-splice-iter-list2-将list2中的所有元素剪贴到list1的iter位置-list容器"><a href="#list1-splice-iter-list2-将list2中的所有元素剪贴到list1的iter位置-list容器" class="headerlink" title="list1.splice(iter, list2): 将list2中的所有元素剪贴到list1的iter位置(list容器)"></a>list1.splice(iter, list2): 将list2中的所有元素剪贴到list1的iter位置(list容器)</h5></li><li><h5 id="list1-splice-pos-list2-iter1-iter2-将list2中的某一段位置iter1-iter2的元素剪贴到list1中的pos位置"><a href="#list1-splice-pos-list2-iter1-iter2-将list2中的某一段位置iter1-iter2的元素剪贴到list1中的pos位置" class="headerlink" title="list1.splice(pos, list2, iter1, iter2): 将list2中的某一段位置iter1 ~ iter2的元素剪贴到list1中的pos位置"></a>list1.splice(pos, list2, iter1, iter2): 将list2中的某一段位置iter1 ~ iter2的元素剪贴到list1中的pos位置</h5></li><li><p><code>lst.insert(iterator,9);//1 9 2 3 4 5</code> iter原本指向 2，在iter位置插上9，原先元素<strong>后移</strong></p></li><li><h5 id="nth-element-begin-last-nth-comp-，默认升序排列，找到第nth大的元素，移到第nth的位置"><a href="#nth-element-begin-last-nth-comp-，默认升序排列，找到第nth大的元素，移到第nth的位置" class="headerlink" title="nth_element(begin, last, nth, comp)，默认升序排列，找到第nth大的元素，移到第nth的位置"></a>nth_element(begin, last, nth, comp)，默认升序排列，找到第nth大的元素，移到第nth的位置</h5></li><li><p><strong>任意进制转换到二进制</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-built_in">stol</span>()第二个参数默认为<span class="hljs-literal">NULL</span>，第三个默认<span class="hljs-number">10</span>进制，可<span class="hljs-number">8</span>/<span class="hljs-number">16</span>进制<br><span class="hljs-function">bitset&lt;16&gt; <span class="hljs-title">bin</span><span class="hljs-params">(stol(t, <span class="hljs-literal">nullptr</span>, <span class="hljs-number">16</span>))</span></span>;   先转为<span class="hljs-type">long</span>，通过bitset转为二进制<span class="hljs-number">16</span>位<br>string s = bin.<span class="hljs-built_in">to_string</span>();<br></code></pre></td></tr></table></figure></li></ul><h3 id="ACM模式输入输出："><a href="#ACM模式输入输出：" class="headerlink" title="ACM模式输入输出："></a>ACM模式输入输出：</h3><ul><li><h6 id="使用while循环进行输入字符串，终止输入-Ctrl-Z"><a href="#使用while循环进行输入字符串，终止输入-Ctrl-Z" class="headerlink" title="使用while循环进行输入字符串，终止输入 Ctrl + Z"></a>使用while循环进行输入字符串，终止输入 <mark>Ctrl + Z</mark></h6></li><li><p><code>#include &lt;bits/stdc++.h&gt;</code> 包括输入输出头文件</p></li><li><p><code>using namespace std;</code></p></li><li><p><code>while (cin &gt;&gt; n) &#123; \*\ &#125;</code></p></li><li><p><code>while (getchar() != &#39;\n&#39;) &#123; 判断换行符号&#125;</code> 或者替换成 <mark>if</mark><code>if (getchar( ) ==  &#39;\n&#39;) &#123; 处理一行数据&#125;</code></p></li><li><p>注意 if  替换  第二个 while</p></li><li><p>getchar()，从缓冲区取一个字符，缓冲区少一个字符</p></li><li><p><a href="https://blog.csdn.net/qq_38436921/article/details/123928165?spm=1001.2101.3001.6650.3&utm_medium=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-3-123928165-blog-124160921.235%5Ev27%5Epc_relevant_default&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-3-123928165-blog-124160921.235%5Ev27%5Epc_relevant_default&utm_relevant_index=4">笔试时的ACM模式输入输出汇总（C++版）_风还好冷的博客-CSDN博客</a></p></li><li><pre><code class="cpp">int main() &#123;    读取一行字符串，以逗号分隔    string line;    while(getline(cin, line))&#123;        vector&lt;string&gt; strs;        stringstream ss(line);        string str;        while (getline(ss, str, &#39;,&#39;)) &#123;            strs.push_back(str);        &#125;    &#125;    return 0;&#125;<figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs excel"><br>- 注意 &lt;mark&gt;getline(ss, str, &#x27;,&#x27;)  &lt;/mark&gt; 从stringstream 读数据，以逗号分隔<br><br>### li<span class="hljs-symbol">st:</span><br><br>- list容器 其成员函数remove,erase,pop_front,pop_back,clear 自动释放元素内存空间，同时元素迭代器失效<br><br>- 删除某个元素，仅仅会删除元素的迭代器失效。插入、删除一个结点不会对其他结点造成影响。<br><br>### 二分法：<span class="hljs-symbol">:sl</span>ightly_smiling_fa<span class="hljs-symbol">ce:</span><br><br>- ```cpp<br>  <span class="hljs-built_in">int</span> <span class="hljs-built_in">search</span>(vector&lt;<span class="hljs-built_in">int</span>&gt;&amp; nums, <span class="hljs-built_in">int</span> target) &#123;<br>      <span class="hljs-built_in">int</span> <span class="hljs-built_in">left</span> = <span class="hljs-number">0</span>;<br>      <span class="hljs-built_in">int</span> <span class="hljs-built_in">right</span> = nums.size() - <span class="hljs-number">1</span>; // 定义target在左闭右闭的间里，[<span class="hljs-built_in">left</span>, <span class="hljs-built_in">right</span>]<br>      while (<span class="hljs-built_in">left</span> &lt;= <span class="hljs-built_in">right</span>) &#123; // 当<span class="hljs-built_in">left</span>==<span class="hljs-built_in">right</span>，区间[<span class="hljs-built_in">left</span>, <span class="hljs-built_in">right</span>]依然有效，所以用 &lt;=<br>          <span class="hljs-built_in">int</span> <span class="hljs-built_in">mid</span> = <span class="hljs-built_in">left</span> + ((<span class="hljs-built_in">right</span> - <span class="hljs-built_in">left</span>) / <span class="hljs-number">2</span>);// 防止溢出 等同于(<span class="hljs-built_in">left</span> + <span class="hljs-built_in">right</span>)/<span class="hljs-number">2</span><br>          <span class="hljs-built_in">if</span> (nums[<span class="hljs-built_in">mid</span>] &gt; target) <span class="hljs-built_in">right</span> = middle - <span class="hljs-number">1</span>;<br>          else <span class="hljs-built_in">if</span> (nums[<span class="hljs-built_in">mid</span>] &lt; target) <span class="hljs-built_in">left</span> = middle + <span class="hljs-number">1</span>;  <br>          else return <span class="hljs-built_in">mid</span>;<br>      &#125;<br>      return -<span class="hljs-number">1</span>;<br>  &#125;<br></code></pre></td></tr></table></figure></code></pre></li></ul><h3 id="快速排序："><a href="#快速排序：" class="headerlink" title="快速排序："></a>快速排序：</h3><ul><li><pre><code class="cpp">int partition(int[] nums, int left, int right) &#123;        int pivot = nums[left];        while (left &lt; right) &#123;            while (left &lt; right &amp;&amp; pivot &lt;= nums[right])    right--;            nums[left] = nums[right];            while (left &lt; right &amp;&amp; pivot &gt;= nums[left])     left++;            nums[right] = nums[left];        &#125;        nums[left] = pivot;        return left;    &#125;void quicksort(int[] nums, int left, int right) &#123;    int pivot;    if (left &lt; right) &#123;        pivot = partition(nums, left, right);        quicksort(nums, left, pivot - 1);        quicksort(nums, pivot + 1, right);    &#125;&#125;<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><br><span class="hljs-operator">-</span> ```cpp<br>  while (<span class="hljs-keyword">left</span> <span class="hljs-operator">&lt;</span> <span class="hljs-keyword">right</span> <span class="hljs-operator">&amp;&amp;</span> pivot <span class="hljs-operator">&lt;=</span> nums[<span class="hljs-keyword">right</span>])    <span class="hljs-keyword">right</span><span class="hljs-comment">--;</span><br>  while (<span class="hljs-keyword">left</span> <span class="hljs-operator">&lt;</span> <span class="hljs-keyword">right</span> <span class="hljs-operator">&amp;&amp;</span> pivot <span class="hljs-operator">&gt;=</span> nums[<span class="hljs-keyword">left</span>])     <span class="hljs-keyword">left</span><span class="hljs-operator">+</span><span class="hljs-operator">+</span>;<br></code></pre></td></tr></table></figure></code></pre></li><li><p><strong>有重复元素时多加 ’‘ &#x3D; ’‘</strong></p></li></ul><h3 id="数组："><a href="#数组：" class="headerlink" title="数组："></a>数组：</h3><ul><li><p> <code>for (int i = 0; i &lt;= arr.size() - k; i += k)</code>，每次遍历k个元素，注意<mark> <strong>i  &lt;&#x3D; arr.size() - k</mark></strong></p></li><li><p> <code>priority_queue&lt;int,vector&lt;int&gt;，less&lt;int&gt;&gt;</code>，第二个参数是存储容器，第三个是比较函数，默认自顶向下变小（大顶堆）,<code>greater&lt;int&gt;</code>是自顶向下升序增大（小顶堆）</p></li><li><p> 求数组中三数之和（固定第一个，再用双指针），四数之和，<mark><strong>先排序</strong></mark>，方便后面剪枝</p></li></ul><h3 id="链表：-grimacing"><a href="#链表：-grimacing" class="headerlink" title="链表：:grimacing:"></a>链表：:grimacing:</h3><ul><li><pre><code class="cpp">struct ListNode &#123;    int val;    ListNode* next;    ListNode(int val):val(val), next(nullptr)&#123;&#125;&#125;;ListNode* node = new ListNode(val);<figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey"><br>- ```cpp<br>  ListNode* dummyHead = <span class="hljs-keyword">new</span> ListNode(<span class="hljs-number">0</span>)<span class="hljs-comment">;  //使用虚拟头节点</span><br>  dummyHead-&gt;next = head<span class="hljs-comment">;</span><br>  ListNode* cur = dummyHead<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure></code></pre></li><li><p>考虑存储指针数组，这样就能随机访问链表</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cpp">vector&lt;ListNode*&gt; vec;<br>ListNode* cur=head;<br><span class="hljs-keyword">while</span>(cur)&#123;<br>    vec.<span class="hljs-built_in">push_back</span>(cur);<br>    cur=cur-&gt;next;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>对链表每K个结点翻转，定义一个指针数组，对数组翻转，变相对链表操作</p></li></ul><h3 id="String"><a href="#String" class="headerlink" title="String:"></a>String:</h3><ul><li><p>双指针法判断 <strong>回文</strong> </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">countSubstrings</span><span class="hljs-params">(string s)</span> </span>&#123;<br>    <span class="hljs-type">int</span> result = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; s.<span class="hljs-built_in">size</span>(); i++) &#123;<br>        result += <span class="hljs-built_in">extend</span>(s, i, i); <span class="hljs-comment">// 以i为中心</span><br>        result += <span class="hljs-built_in">extend</span>(s, i, i + <span class="hljs-number">1</span>); <span class="hljs-comment">// 以i和i+1为中心</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> result;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">extend</span><span class="hljs-params">(<span class="hljs-type">const</span> string&amp; s, <span class="hljs-type">int</span> i, <span class="hljs-type">int</span> j)</span> </span>&#123;<br>    <span class="hljs-type">int</span> res = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (i &gt;= <span class="hljs-number">0</span> &amp;&amp; j &lt; s.<span class="hljs-built_in">size</span>() &amp;&amp; s[i] == s[j]) &#123;<br>        i--;<br>        j++;<br>        res++;<br>    &#125;<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>寻找中间 <strong>最大&#x2F;最小数</strong></p></li><li><pre><code class="cpp">bool isPalindrome(const string&amp; s, int start, int end) &#123;    for (int i = start, j = end; i &lt; j; i++, j--) &#123;        if (s[i] != s[j]) &#123;            return false;        &#125;    &#125;    return true;&#125;<figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey"><br>- ```cpp<br>  s.replace(s.find(<span class="hljs-string">&quot; &quot;</span>),<span class="hljs-number">2</span>,<span class="hljs-string">&quot; &quot;</span>)<span class="hljs-comment">; 注意参数2,从找到第一个位置开始往后2个字符</span><br></code></pre></td></tr></table></figure></code></pre></li><li><p>不能 str.erase( s.rbegin() )</p></li><li><pre><code class="cpp">if( str.find(&quot;a&quot;) != -1 );   查找结论是 -1 不是end()<figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey"><br>- ```cpp<br>  s.substr(start,len)<span class="hljs-comment">;  取子串</span><br></code></pre></td></tr></table></figure></code></pre></li><li><p>查找字符串S是否包含子串sub， S+S拼接破环头尾，判断 S.find(sub) 存在</p></li><li><p><strong>stoll： string型变量转换为long long型变量(常用)，兼容int long</strong></p></li><li><p><strong>stod： string型变量转换为double型变量(常用)，兼容float</strong></p></li><li><p><strong>to_string(val)，其他变量转string</strong></p></li></ul><h3 id="优先队列（堆）："><a href="#优先队列（堆）：" class="headerlink" title="优先队列（堆）："></a>优先队列（堆）：</h3><ul><li><pre><code class="cpp">priority_queue&lt;int, vector&lt;int&gt;, cmp&gt; p_queue;  默认底层容器vector，默认大顶堆less<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><br>- ```cpp<br>  <span class="hljs-keyword">class</span> <span class="hljs-title class_">cmp</span>&#123;<br>  <span class="hljs-keyword">public</span>:<br>      <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">operator</span><span class="hljs-params">()</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp;a,vector&lt;<span class="hljs-type">int</span>&gt;&amp;b)</span></span>&#123;<br>          <span class="hljs-keyword">return</span> a[<span class="hljs-number">0</span>]&gt;b[<span class="hljs-number">0</span>];   小顶堆<br>      &#125;<br>  &#125;;<br>  priority_queue&lt;vector&lt;<span class="hljs-type">int</span>&gt;,vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt;,cmp&gt; q;   自定义比较函数，小顶堆<br></code></pre></td></tr></table></figure></code></pre></li><li><pre><code class="cpp">struct cmp &#123;     bool operator()(pair&lt;int,int&gt;&amp; a,pair&lt;int,int&gt;&amp; b)&#123;         return a.second &gt; b.second;    &#125;&#125;;priority_queue&lt;pair&lt;int,int&gt;, vector&lt;pair&lt;int,int&gt;&gt;, cmp&gt; q;<figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><br>- 两种自定义比较函数，小顶堆，注意符号，（默认大顶堆），第二个参数设置底层容器，必填，否则第三个参数不起作用<br><br>### 二叉树：<br><br>- ```cpp<br>  <span class="hljs-keyword">struct</span> TreeNode &#123;<br>      <span class="hljs-built_in">int</span> <span class="hljs-keyword">val</span>;<br>      TreeNode *left;<br>      TreeNode *right;<br>      <span class="hljs-constructor">TreeNode(<span class="hljs-params">int</span> <span class="hljs-params">x</span>)</span> : <span class="hljs-keyword">val</span>(x), left(nullptr), right(nullptr) &#123;&#125;<br>  &#125;;<br></code></pre></td></tr></table></figure></code></pre></li><li><p>二叉树递归参数传值val，切忌不要用引用&amp;val，不能改变val值，方便回溯</p></li><li><p>递归遍历函数是否需要返回值：1.若不用全部遍历，只要求找到一条路径，则要返回值bool；2.若全部遍历，找到所有满足条件路径，则不需要返回值</p></li><li><p>递归返回 <code>TreeNode*</code>，可以 <code>return nullptr;</code></p></li><li><p>递归先想好，先序&#x2F;中序&#x2F;后续遍历，对应 先访问  root 还是 左子树；中序一定先遍历所有左子树，在返回上一层访问root。</p></li><li><p><mark>二叉搜索树直接中序遍历</mark>，得到有序数组</p></li><li><p><strong><mark>删除</mark></strong> 二叉树节点，**<mark>增加</mark>** 二叉树节点，都是用 <strong><mark>递归函数的返回值</mark></strong> 来完成</p></li><li><p>根据有序数组创建 二叉搜索树，同时也是平衡树；</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">TreeNode* <span class="hljs-title">createTree</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; vec,<span class="hljs-type">int</span> left,<span class="hljs-type">int</span> right)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(left &gt; right) <span class="hljs-keyword">return</span> <span class="hljs-literal">nullptr</span>;<br>    <span class="hljs-type">int</span> mid = (left+right)/<span class="hljs-number">2</span>;<br>    TreeNode* node = <span class="hljs-keyword">new</span> <span class="hljs-built_in">TreeNode</span>(vec[mid]);<br>    node-&gt;left = <span class="hljs-built_in">createTree</span>(vec,left,mid<span class="hljs-number">-1</span>);<br>    node-&gt;right = <span class="hljs-built_in">createTree</span>(vec,mid+<span class="hljs-number">1</span>,right);<br>    <span class="hljs-keyword">return</span> node;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><pre><code class="cpp">class Solution &#123;        求公共最近公共邻居leetcode.236public:    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) &#123;        if (root == q || root == p || root == NULL) return root;        TreeNode* left = lowestCommonAncestor(root-&gt;left, p, q);        TreeNode* right = lowestCommonAncestor(root-&gt;right, p, q);        if (left != NULL &amp;&amp; right != NULL) return root;        if (left == NULL &amp;&amp; right != NULL) return right;        else if (left != NULL &amp;&amp; right == NULL) return left;        else  &#123; //  (left == NULL &amp;&amp; right == NULL)            return NULL;        &#125;    &#125;&#125;;<figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><br><span class="hljs-bullet">-</span> 考虑设置 全局变量<span class="hljs-code">``public: TreeNode* pre;`</span>` 递归过程更新全局指针变量<br><br><span class="hljs-bullet">-</span> <span class="hljs-strong">**递归 一定 看函数返回什么，指针？整数？，利用起来``root-&gt;left = deleteNode(root-&gt;left,key);``**</span><br><br><span class="hljs-section">### 回溯法：</span><br><br><span class="hljs-bullet">-</span> <span class="hljs-strong">**关键词：返回所有可能方案**</span><br><br><span class="hljs-bullet">-</span> <span class="hljs-strong">**回溯是递归的副产品，只要有递归就会有回溯**</span>。<br><br><span class="hljs-bullet">-</span> 回溯法就是暴力搜索，并不是什么高效的算法，最多在剪枝一下。（解决多层for循环）<br><br><span class="hljs-bullet">-</span> <span class="hljs-code">```cpp</span><br><span class="hljs-code">  void backtracking(参数) &#123;</span><br><span class="hljs-code">      if (终止条件) &#123;</span><br><span class="hljs-code">          存放结果;</span><br><span class="hljs-code">          return;</span><br><span class="hljs-code">      &#125;</span><br><span class="hljs-code">  </span><br><span class="hljs-code">      for (选择：本层集合中元素（树中节点孩子的数量就是集合的大小）) &#123;</span><br><span class="hljs-code">          处理节点;</span><br><span class="hljs-code">          backtracking(路径，选择列表); // 递归</span><br><span class="hljs-code">          回溯，撤销处理结果!!!</span><br><span class="hljs-code">      &#125;</span><br><span class="hljs-code">  &#125;</span><br></code></pre></td></tr></table></figure></code></pre></li><li><p>在终止条件前加入剪枝，即进入递归后提前<code>return</code></p></li><li><pre><code class="cpp">class Solution &#123;private:    vector&lt;vector&lt;int&gt;&gt; result; // 存放符合条件结果的集合    vector&lt;int&gt; path; // 用来存放符合条件结果    void backtracking(int n, int k, int startIndex) &#123;        if (path.size() == k) &#123;            result.push_back(path);            return;        &#125;        for (int i = startIndex; i &lt;= n; i++) &#123;            path.push_back(i); // 处理节点            backtracking(n, k, i + 1);   **注意 传i+1, 不是startIndex            path.pop_back(); // 回溯，撤销处理的节点        &#125;    &#125;public:    vector&lt;vector&lt;int&gt;&gt; combine(int n, int k) &#123;        result.clear(); // 可以不写        path.clear();   // 可以不写        backtracking(n, k, 1);        return result;    &#125;&#125;;<figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><br><span class="hljs-bullet">-</span> 经典组合题，注意<span class="hljs-code">``backtracking(n, k, i + 1);`</span><span class="hljs-code">` 传&lt;mark&gt; i+1&lt;/mark&gt;， 回溯部分`</span><span class="hljs-code">`path.pop_back()`</span>`以及相应处理<br><br><span class="hljs-bullet">-</span> 善用used[ ]，标记已访问的元素。<br><br><span class="hljs-bullet">-</span> 全组合用startIndex（无顺序且组合不能重复），全排列 不用 startIndex，而是用used[ ]（有顺序且同意元素不能重复选取）<br><br><span class="hljs-bullet">-</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">mark</span>&gt;</span></span><span class="hljs-strong">**对于结果有重复子集，需去重，则先排序，通过判断相邻结点是否重复使用过**</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">mark</span>&gt;</span></span><br><br><span class="hljs-bullet">-</span> <span class="hljs-code">```cpp</span><br><span class="hljs-code">  if (i &gt; 0 &amp;&amp; nums[i] == nums[i - 1] &amp;&amp; used[i - 1] == false) continue;</span><br></code></pre></td></tr></table></figure></code></pre></li><li><p>先排序，对于{1,1,2},  used[1]&#x3D;false表示<mark>同一数层</mark>上n[0]已被用过，而n[0]&#x3D;&#x3D;n[1]，所以跳过；对于used[0]&#x3D;true，表示n[0]在<mark>上一层，同一条树枝上</mark>，不在同一层，可重复使用。</p></li><li><p>排列题，含去重</p></li><li><pre><code class="cpp">class Solution &#123;private:    vector&lt;vector&lt;int&gt;&gt; result;    vector&lt;int&gt; path;    void backtracking (vector&lt;int&gt;&amp; nums, vector&lt;bool&gt;&amp; used) &#123;        // 此时说明找到了一组        if (path.size() == nums.size()) &#123;            result.push_back(path);            return;        &#125;        for (int i = 0; i &lt; nums.size(); i++) &#123;            // used[i - 1] == true，说明同一树枝nums[i - 1]使用过            // used[i - 1] == false，说明同一树层nums[i - 1]使用过            // 如果同一树层nums[i - 1]使用过则直接跳过            if (i &gt; 0 &amp;&amp; nums[i] == nums[i - 1] &amp;&amp; used[i - 1] == false) &#123;                continue;            &#125;            //if ( used[i] == true ) continue;            if (used[i] == false) &#123;                used[i] = true;                path.push_back(nums[i]);                backtracking(nums, used);                path.pop_back();                used[i] = false;            &#125;        &#125;    &#125;public:    vector&lt;vector&lt;int&gt;&gt; permuteUnique(vector&lt;int&gt;&amp; nums) &#123;        result.clear();        path.clear();        sort(nums.begin(), nums.end()); // 排序        vector&lt;bool&gt; used(nums.size(), false);        backtracking(nums, used);        return result;    &#125;&#125;;<figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><br>- `<span class="hljs-keyword">if</span> (used[i] == <span class="hljs-keyword">false</span>) &#123; <span class="hljs-comment">//处理，回溯 &#125;`，记住前提条件，&lt;mark&gt;上一层已选过，就不考虑啦&lt;/mark&gt;，或者改为`if ( used[i] == true ) continue;`</span><br><br>- 递归和回溯：<span class="hljs-number">1</span>）要遍历所有元素找全部结果，函数<span class="hljs-keyword">void</span>无返回值；<span class="hljs-number">2</span>）只要找到一条路径/结果，函数有返回值bool（同二叉树）<br><br>### 贪心算法：<br><br>- **贪心的本质是选择每一阶段的局部最优，从而达到全局最优**<br><br>- 适当排序给定数组！<br><br>- 加关键词 <span class="hljs-keyword">static</span> 才能在<span class="hljs-keyword">sort</span>使用cmp，函数<span class="hljs-keyword">sort</span>要求这个参数&lt;mark&gt;cmp需要为静态的&lt;<span class="hljs-regexp">/mark&gt;，或者&lt;mark&gt;声明类外&lt;/m</span>ark&gt;<br><br>```cpp<br><span class="hljs-keyword">static</span> bool cmp(<span class="hljs-keyword">int</span> a,<span class="hljs-keyword">int</span> b)&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">abs</span>(a) &gt; <span class="hljs-keyword">abs</span>(b);<br>&#125;<br><span class="hljs-keyword">sort</span>(nums.begin(),nums.end(),cmp);  <br></code></pre></td></tr></table></figure></code></pre></li><li><p>模拟循环数组 <code>index = (index + 1) % cost.size();</code></p></li><li><p><mark>左右排序两次问题</mark>，区间问题，或数组中当前元素与左右元素比较时，先顺序遍历，在逆序遍历，两次遍历不能同时兼顾左右（lc.135），换句话说，遇到两个维度权衡的时候，一定要先确定一个维度，再确定另一个维度</p></li></ul><h3 id="动态规划："><a href="#动态规划：" class="headerlink" title="动态规划："></a>动态规划：</h3><ol><li><p>确定dp数组（dp table）以及下标的含义</p></li><li><p>确定递推公式</p></li><li><p>dp数组如何初始化</p></li><li><p>确定遍历顺序</p></li><li><p>举例推导dp数组</p></li></ol><ul><li><p><strong>debug最好方式就是把dp数组打印出来，看看究竟是不是按照自己思路推导的！</strong></p></li><li><p>dp初始化后 遍历数组考虑初始值，避免越界</p><h3 id="经典01背包问题（每个物品只能放入一次）"><a href="#经典01背包问题（每个物品只能放入一次）" class="headerlink" title="经典01背包问题（每个物品只能放入一次）"></a><strong>经典01背包问题（每个物品只能放入一次）</strong></h3></li><li><p>外层遍历物品，**<mark>内层遍历容量</mark>**</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// 二维数组</span><br>vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; <span class="hljs-built_in">dp</span>(weight.<span class="hljs-built_in">size</span>(), <span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;(bagweight + <span class="hljs-number">1</span>, <span class="hljs-number">0</span>));<br><span class="hljs-comment">// 初始化</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = weight[<span class="hljs-number">0</span>]; j &lt;= bagweight; j++) &#123;<br>    dp[<span class="hljs-number">0</span>][j] = value[<span class="hljs-number">0</span>];<br>&#125;<br><span class="hljs-comment">// weight数组的大小 就是物品个数</span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; weight.<span class="hljs-built_in">size</span>(); i++) &#123; <span class="hljs-comment">// 遍历物品</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt;= bagweight; j++) &#123; <span class="hljs-comment">// 遍历背包容量</span><br>        放不下 i 重量<br>        <span class="hljs-keyword">if</span> (j &lt; weight[i]) dp[i][j] = dp[i - <span class="hljs-number">1</span>][j]; <br>        <span class="hljs-keyword">else</span> dp[i][j] = <span class="hljs-built_in">max</span>(dp[i - <span class="hljs-number">1</span>][j], dp[i - <span class="hljs-number">1</span>][j - weight[i]] + value[i]);<br>    &#125;<br>&#125;<br>cout &lt;&lt; dp[weight.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>][bagweight] &lt;&lt; endl;<br></code></pre></td></tr></table></figure></li><li><p>滚顶数组 降低空间复杂度，先正序遍历物品，在<mark>倒序遍历背包容量</mark>，dp[j]表示：容量维j的背包，所背的物品价值最大为dp[j]，<mark><strong>倒序遍历是为了保证物品i只被放入一次！</strong></mark></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// 初始化</span><br><span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">dp</span><span class="hljs-params">(bagWeight + <span class="hljs-number">1</span>, <span class="hljs-number">0</span>)</span></span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; weight.<span class="hljs-built_in">size</span>(); i++) &#123; <span class="hljs-comment">// 遍历物品</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = bagWeight; j &gt;= weight[i]; j--) &#123; <span class="hljs-comment">// 遍历背包容量</span><br>        dp[j] = <span class="hljs-built_in">max</span>(dp[j], dp[j - weight[i]] + value[i]);<br>    &#125;<br>&#125;<br>cout &lt;&lt; dp[bagWeight] &lt;&lt; endl;<br></code></pre></td></tr></table></figure></li><li><p><code>dp[i]</code>表示不放物体，相当于dp[i-1][j]，不放物体 i，<code>dp[j - weight[i]] + value[i]</code>表示放物体 i，为放物体前容量的最大价值+ 物体i的价值</p></li><li><p>为什么第二次循环<code>j&gt;=weight[i]</code>，因为<code>dp[j - weight[i]]</code><mark>表示放物体前的容量，不能为负数</mark>，考虑能放下的情况，放还是不放；对于不能放下就默认等于上一次值，不考虑</p></li><li><p><mark>初始化dp数据容量很重要</mark></p></li><li><p>注意 <mark><strong>dp[ j ] &#x3D; max(…)</strong></mark>，j 第二重循环变量</p></li><li><p>注意第二重<mark><strong>循环 j 初始值</strong></mark>，为<strong>dp容量最大值</strong></p><h2 id="完全背包问题（每件物品无限件）"><a href="#完全背包问题（每件物品无限件）" class="headerlink" title="完全背包问题（每件物品无限件）"></a><strong>完全背包问题（每件物品无限件）</strong></h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// 先遍历物品，再遍历背包</span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; weight.<span class="hljs-built_in">size</span>(); i++) &#123; <span class="hljs-comment">// 遍历物品</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = weight[i]; j &lt;= bagWeight ; j++) &#123; <span class="hljs-comment">// 遍历背包容量</span><br>        dp[j] = <span class="hljs-built_in">max</span>(dp[j], dp[j - weight[i]] + value[i]);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><strong>内循环 从小到大遍历，因为每件物品添加多次</strong></p></li><li><p><strong>理解 内循环 dp[ j ]：每次容量为 j 的时候…所以后面内容都是考虑当前容量为 j</strong></p></li><li><p><strong>如果求<mark>组合数</mark>就是外层for循环遍历物品，内层for遍历背包</strong>。</p><p><strong>如果求<mark>排列数</mark>就是外层for遍历背包，内层for循环遍历物品</strong></p></li><li><p>滚动数组为了取代二维数组，但<strong>内循环一般是倒序</strong>的，防止重复选取</p></li></ul><h2 id="求连续-x2F-公共（相对连续）子序列"><a href="#求连续-x2F-公共（相对连续）子序列" class="headerlink" title="求连续&#x2F;公共（相对连续）子序列"></a>求连续&#x2F;公共（相对连续）子序列</h2><ul><li><p><strong>dp[i][j] ：以下标<mark>i - 1</mark>为结尾的A，和以下标<mark>j - 1</mark>为结尾的B，最长重复子数组<mark>长度</mark>为dp[i][j]。</strong> 记住，简化代码，方便后面dp数组初始化的</p></li><li><p>求 <strong>连续</strong> 最长重复子数组</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">findLength</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums1, vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums2)</span> </span>&#123;<br>        vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; <span class="hljs-built_in">dp</span>(nums1.<span class="hljs-built_in">size</span>()+<span class="hljs-number">1</span>,<span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;(nums2.<span class="hljs-built_in">size</span>()+<span class="hljs-number">1</span>,<span class="hljs-number">0</span>));<br>        <span class="hljs-type">int</span> res = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i &lt;=nums1.<span class="hljs-built_in">size</span>();i++)&#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;j&lt;=nums2.<span class="hljs-built_in">size</span>();j++)&#123;<br>                <span class="hljs-keyword">if</span>(nums1[i<span class="hljs-number">-1</span>] == nums2[j<span class="hljs-number">-1</span>])&#123;<br>                    dp[i][j] = dp[i<span class="hljs-number">-1</span>][j<span class="hljs-number">-1</span>]+<span class="hljs-number">1</span>;<br>                &#125;<br>                <span class="hljs-keyword">if</span>(dp[i][j] &gt; res) res = dp[i][j];<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure></li><li><p>求 <strong>不连续</strong> 公共子数组</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">longestCommonSubsequence</span><span class="hljs-params">(string text1, string text2)</span> </span>&#123;<br>        vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; <span class="hljs-built_in">dp</span>(text1.<span class="hljs-built_in">size</span>()+<span class="hljs-number">1</span>,<span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;(text2.<span class="hljs-built_in">size</span>()+<span class="hljs-number">1</span>,<span class="hljs-number">0</span>));<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=text1.<span class="hljs-built_in">size</span>();i++)&#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;j&lt;=text2.<span class="hljs-built_in">size</span>();j++)&#123;<br>                <span class="hljs-keyword">if</span>(text1[i<span class="hljs-number">-1</span>] == text2[j<span class="hljs-number">-1</span>])&#123;<br>                    dp[i][j] = dp[i<span class="hljs-number">-1</span>][j<span class="hljs-number">-1</span>] + <span class="hljs-number">1</span>;<br>                &#125;<span class="hljs-keyword">else</span>&#123;<br>                    dp[i][j] = <span class="hljs-built_in">max</span>(dp[i<span class="hljs-number">-1</span>][j],dp[i][j<span class="hljs-number">-1</span>]);<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> dp[text1.<span class="hljs-built_in">size</span>()][text2.<span class="hljs-built_in">size</span>()];<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure></li><li><p>思考 d[i][j] 是一个数，表示什么意思？公共长度？最多重复数量？最少删除次数？视情况而定</p></li><li><p>记住：求 回文子串 双指针 或 dp[i][j] 表示在 <strong>[i, j]</strong> 范围内最大子串，dp[i][j] &#x3D; dp[i + 1][j - 1] + x</p></li></ul><h3 id="单调栈"><a href="#单调栈" class="headerlink" title="单调栈"></a>单调栈</h3><ul><li><p><strong>要寻找任一个元素的右边或者左边第一个比自己大或者小的元素的位置</strong></p></li><li><p>栈里只存递增或递减的idx（下标），遇到逆序就弹出栈内元素，从而得到第一个大于或小于元素的idx</p></li><li><p><code>nums.insert(nums.end(), arr.begin(), arr.end());</code> 数组拼接</p></li><li><p>设置两个数组，顺序和逆序遍历，得到左边&#x2F;右边最大数字</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// 记录每个柱子左边柱子最大高度</span><br>maxLeft[<span class="hljs-number">0</span>] = height[<span class="hljs-number">0</span>];<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; size; i++) &#123;<br>    maxLeft[i] = <span class="hljs-built_in">max</span>(height[i], maxLeft[i - <span class="hljs-number">1</span>]);<br>&#125;<br><span class="hljs-comment">// 记录每个柱子右边柱子最大高度</span><br>maxRight[size - <span class="hljs-number">1</span>] = height[size - <span class="hljs-number">1</span>];<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = size - <span class="hljs-number">2</span>; i &gt;= <span class="hljs-number">0</span>; i--) &#123;<br>    maxRight[i] = <span class="hljs-built_in">max</span>(height[i], maxRight[i + <span class="hljs-number">1</span>]);<br>&#125;<br></code></pre></td></tr></table></figure></li><li></li></ul><p>![v2-cd266d44190875488ce886af2ff1d076_xl](C:\Users\63265\Pictures\Saved Pictures\v2-cd266d44190875488ce886af2ff1d076_xl.jpg)</p>]]></content>
    
    
    <categories>
      
      <category>cpp</category>
      
    </categories>
    
    
    <tags>
      
      <tag>cpp</tag>
      
      <tag>note</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2023/06/11/hello-world/"/>
    <url>/2023/06/11/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
